/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package designpattern.views.admin;

import designpattern.adapter.ConvertData;
import designpattern.adapter.IConvertData;
import designpattern.command.registration.RegisSortingCommander;
import designpattern.command.student.StudentSortingCommander;
import designpattern.command.subject.SubjectSortingCommander;
import designpattern.controllers.CourseController;
import designpattern.controllers.RegistrationController;
import designpattern.controllers.StudentController;
import designpattern.controllers.SubjectController;
import designpattern.models.Registration;
import designpattern.models.Student;
import designpattern.models.Subject;
import designpattern.strategy.registration.SearchByRegistrationName;
import designpattern.strategy.registration.SearchByReigsterTime;
import designpattern.strategy.registration.SearchingRegistration;
import designpattern.strategy.student.SearchByMajor;
import designpattern.strategy.student.SearchByStudentId;
import designpattern.strategy.student.SearchByStudentName;
import designpattern.strategy.student.SearchingStudent;
import designpattern.strategy.subject.SearchByCredit;
import designpattern.strategy.subject.SearchByName;
import designpattern.strategy.subject.SearchBySubjectType;
import designpattern.strategy.subject.SearchingSubject;
import designpattern.validation.Validator;
import designpattern.views.student.Login;
import designpattern.views.student.StudentHome;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pnkn0
 */
public class AdminHome extends javax.swing.JFrame implements ActionListener {

    private SubjectSortingCommander subjectCommander;
    private StudentSortingCommander studentCommander;
    private RegisSortingCommander regisCommander;
    private SubjectController subjectCon = null;
    private StudentController studentCon = null;
    private RegistrationController regisCon = null;
    private CourseController courseCon = null;
    private Validator valid;
    private IConvertData convertData;

    public AdminHome() {
        initComponents();
        try {
            //Subject Tab
            subjectCon = new SubjectController();
            subjectCon.loadDataIntoTable(subjectCon.getSubjectList(), tblSubject);
            subjectCommander = subjectCon.getSubjectCommander();
            convertData = new ConvertData();

            //Student Tab
            studentCon = new StudentController();
            studentCon.loadDataIntoTable(studentCon.getStudentList(), tblStudent);
            studentCommander = studentCon.getStudentCommander();

            regisCon = new RegistrationController();
            regisCon.loadDataIntoTable(regisCon.getRegisList(), tblRegister);
            regisCommander = regisCon.getCommander();

            courseCon = new CourseController();
            valid = new Validator();
        } catch (SQLException ex) {
            Logger.getLogger(AdminHome.class.getName()).log(Level.SEVERE, null, ex);
        }

        addActionListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupSortSubject = new javax.swing.ButtonGroup();
        btnGroupSearchSubject = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        rbSortByCreditDESC = new javax.swing.JRadioButton();
        rbSortByNameDESC = new javax.swing.JRadioButton();
        rbSortByNameASC = new javax.swing.JRadioButton();
        rbSortByCreditASC = new javax.swing.JRadioButton();
        rbSearchByName = new javax.swing.JRadioButton();
        rbSearchByCredit = new javax.swing.JRadioButton();
        txtSearchByCredit = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        rbSearchByTypeSubject = new javax.swing.JRadioButton();
        cbTypeSubject = new javax.swing.JComboBox<>();
        txtSearchByName = new javax.swing.JTextField();
        btnLogout = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSubject = new javax.swing.JTable();
        btnRemoveSubject = new javax.swing.JButton();
        btnEditSubject = new javax.swing.JButton();
        btnAddSubject = new javax.swing.JButton();
        btnRefreshSubject = new javax.swing.JButton();
        btnLoadDataFromFile = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        rbSortStudentByNameASC = new javax.swing.JRadioButton();
        rbSortStudentByNameDESC = new javax.swing.JRadioButton();
        rbSortStudentByIdASC = new javax.swing.JRadioButton();
        rbSearchStudentByName = new javax.swing.JRadioButton();
        txtSearchStudentByName = new javax.swing.JTextField();
        rbSearchStudentById = new javax.swing.JRadioButton();
        rbSearchStudentByMajor = new javax.swing.JRadioButton();
        txtSearchStudentByMajor = new javax.swing.JTextField();
        txtSearchStudentById = new javax.swing.JTextField();
        btnSearchStudent = new javax.swing.JButton();
        rbSortStudentByIdDESC = new javax.swing.JRadioButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblStudent = new javax.swing.JTable();
        btnRemoveStudent = new javax.swing.JButton();
        btnEditStudent = new javax.swing.JButton();
        btnAddStudent = new javax.swing.JButton();
        btnRefreshStudentList = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRegister = new javax.swing.JTable();
        btnAddRegistration = new javax.swing.JButton();
        btnRemoveRegister = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        comboSortRegistering = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        txtSearchRToDate = new javax.swing.JTextField();
        txtSearchRBySName = new javax.swing.JTextField();
        txtSearchRFromDate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnSearchR = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        rbSearchRByTime = new javax.swing.JRadioButton();
        rbSearchRBySName = new javax.swing.JRadioButton();
        btnRefreshRegistering = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblClassification = new javax.swing.JTable();
        btnCreateCourseClass = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sắp xếp và tìm kiếm môn học", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSortByCreditDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortByCreditDESC.setText("Số tiết giảm dần");
        rbSortByCreditDESC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortByCreditDESCActionPerformed(evt);
            }
        });

        rbSortByNameDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortByNameDESC.setText("Tên môn học z-a");

        rbSortByNameASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortByNameASC.setText("Tên môn học a-z");

        rbSortByCreditASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortByCreditASC.setText("Số tiết tăng dần");

        rbSearchByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchByName.setText("Theo tên gần đúng");

        rbSearchByCredit.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchByCredit.setText("Theo số tính chỉ");

        txtSearchByCredit.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearch.setText("Tìm");

        rbSearchByTypeSubject.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchByTypeSubject.setText("Theo loại môn học");

        cbTypeSubject.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cơ sở ngành", "Chuyên ngành", "Nhóm tự chọn 1", "Nhóm tự chọn 2", "Đại cương" }));

        txtSearchByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnLogout.setText("ĐĂNG XUẤT");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(rbSearchByName, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(rbSearchByCredit))
                                        .addGap(18, 18, 18)
                                        .addComponent(txtSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(rbSearchByTypeSubject)
                                        .addGap(22, 22, 22)
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cbTypeSubject, 0, 180, Short.MAX_VALUE)
                                            .addComponent(txtSearchByCredit))
                                        .addGap(241, 241, 241)
                                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(254, 254, 254))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(rbSortByCreditDESC)
                                .addGap(70, 70, 70)
                                .addComponent(rbSortByCreditASC)
                                .addGap(70, 70, 70)
                                .addComponent(rbSortByNameDESC)
                                .addGap(70, 70, 70)
                                .addComponent(rbSortByNameASC)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnLogout))))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator2)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortByCreditDESC)
                    .addComponent(rbSortByNameDESC)
                    .addComponent(rbSortByCreditASC)
                    .addComponent(rbSortByNameASC)
                    .addComponent(btnLogout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchByName)
                    .addComponent(txtSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbSearchByCredit)
                            .addComponent(txtSearchByCredit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbSearchByTypeSubject)
                            .addComponent(cbTypeSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))))
        );

        tblSubject.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblSubject.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã môn", "Tên môn", "Tín chỉ", "Thể loại"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblSubject);

        btnRemoveSubject.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemoveSubject.setText("Xóa môn học");
        btnRemoveSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveSubjectActionPerformed(evt);
            }
        });

        btnEditSubject.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEditSubject.setText("Sửa môn học");
        btnEditSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditSubjectActionPerformed(evt);
            }
        });

        btnAddSubject.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddSubject.setText("Thêm môn học");
        btnAddSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSubjectActionPerformed(evt);
            }
        });

        btnRefreshSubject.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefreshSubject.setText("Làm mới");
        btnRefreshSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshSubjectActionPerformed(evt);
            }
        });

        btnLoadDataFromFile.setText("Load Data");
        btnLoadDataFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadDataFromFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(btnRefreshSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(90, 90, 90)
                                .addComponent(btnAddSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(90, 90, 90)
                                .addComponent(btnEditSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(90, 90, 90)
                                .addComponent(btnRemoveSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(108, 108, 108))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(btnLoadDataFromFile)
                                .addGap(62, 62, 62))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(btnLoadDataFromFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemoveSubject)
                    .addComponent(btnEditSubject)
                    .addComponent(btnAddSubject)
                    .addComponent(btnRefreshSubject))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("QUẢN LÝ MÔN HỌC", jPanel1);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sắp xếp và tìm kiếm sinh viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSortStudentByNameASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortStudentByNameASC.setText("Sắp theo tên tăng dần từ a-z");

        rbSortStudentByNameDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortStudentByNameDESC.setText("Sắp theo tên giảm dần từ z-a");

        rbSortStudentByIdASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortStudentByIdASC.setText("Sắp theo mã sinh viên tăng dần");

        rbSearchStudentByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchStudentByName.setText("Tìm theo tên: ");

        txtSearchStudentByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        rbSearchStudentById.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchStudentById.setText("Tìm theo mã sinh viên: ");

        rbSearchStudentByMajor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchStudentByMajor.setText("Tìm theo chuyên ngành: ");

        txtSearchStudentByMajor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtSearchStudentById.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnSearchStudent.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchStudent.setText("Tìm kiếm");

        rbSortStudentByIdDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortStudentByIdDESC.setText("Sắp theo mã sinh viên giảm dần");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(rbSortStudentByIdDESC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(400, 400, 400)
                        .addComponent(btnSearchStudent)
                        .addGap(199, 199, 199))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(rbSortStudentByIdASC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rbSortStudentByNameDESC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rbSortStudentByNameASC, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(rbSearchStudentByName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rbSearchStudentById, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rbSearchStudentByMajor))
                        .addGap(16, 16, 16)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSearchStudentById, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
                            .addComponent(txtSearchStudentByName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtSearchStudentByMajor))
                        .addContainerGap(43, Short.MAX_VALUE))))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(rbSortStudentByNameASC)
                        .addGap(18, 18, 18)
                        .addComponent(rbSortStudentByNameDESC)
                        .addGap(18, 18, 18)
                        .addComponent(rbSortStudentByIdASC))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbSearchStudentByName)
                            .addComponent(txtSearchStudentByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbSearchStudentById)
                            .addComponent(txtSearchStudentById, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbSearchStudentByMajor)
                            .addComponent(txtSearchStudentByMajor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSearchStudent)
                    .addComponent(rbSortStudentByIdDESC))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        tblStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sinh viên", "Tên sinh viên", "Ngày sinh", "Địa chỉ", "Email", "Số điện thoại", "Lớp", "Chuyên nghành", "Niên khóa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblStudent);

        btnRemoveStudent.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemoveStudent.setText("Xóa sinh viên");
        btnRemoveStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveStudentActionPerformed(evt);
            }
        });

        btnEditStudent.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEditStudent.setText("Sửa sinh viên");
        btnEditStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditStudentActionPerformed(evt);
            }
        });

        btnAddStudent.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddStudent.setText("Thêm sinh viên");
        btnAddStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddStudentActionPerformed(evt);
            }
        });

        btnRefreshStudentList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefreshStudentList.setText("Làm mới");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 93, Short.MAX_VALUE)
                        .addComponent(btnRefreshStudentList, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89)
                        .addComponent(btnAddStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)
                        .addComponent(btnEditStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)
                        .addComponent(btnRemoveStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemoveStudent)
                    .addComponent(btnEditStudent)
                    .addComponent(btnAddStudent)
                    .addComponent(btnRefreshStudentList))
                .addGap(23, 23, 23))
        );

        jTabbedPane1.addTab("QUẢN LÝ SINH VIÊN", jPanel2);

        tblRegister.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sinh viên", "Tên sinh viên", "Lớp", "Mã môn", "Tên môn", "Thời gian đăng ký"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRegister);

        btnAddRegistration.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddRegistration.setText("Thêm đăng ký");

        btnRemoveRegister.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemoveRegister.setText("Xóa đăng ký");
        btnRemoveRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveRegisterActionPerformed(evt);
            }
        });

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sắp xếp và tìm kiếm bảng đăng ký", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Sắp xếp bảng đăng ký theo: ");

        comboSortRegistering.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        comboSortRegistering.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Thời gian đăng ký sớm-muộn", "Thời gian đăng ký muộn-sớm" }));

        txtSearchRToDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtSearchRBySName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtSearchRFromDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Từ ngày: ");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Đến ngày: ");

        btnSearchR.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchR.setText("Tìm kiếm");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Nhập tên sinh viên: ");

        rbSearchRByTime.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchRByTime.setText("Tìm kiếm theo thời gian đăng ký: ");

        rbSearchRBySName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchRBySName.setText("Tìm kiếm theo tên sinh viên: ");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboSortRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbSearchRByTime)
                            .addComponent(rbSearchRBySName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSearchRToDate, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                            .addComponent(txtSearchRFromDate, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtSearchRBySName, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(51, 51, 51)
                        .addComponent(btnSearchR, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboSortRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchRBySName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(rbSearchRBySName))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchRFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(btnSearchR)
                    .addComponent(rbSearchRByTime))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtSearchRToDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        btnRefreshRegistering.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefreshRegistering.setText("Làm mới");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(btnRefreshRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(148, 148, 148)
                .addComponent(btnAddRegistration, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(148, 148, 148)
                .addComponent(btnRemoveRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemoveRegister)
                    .addComponent(btnAddRegistration)
                    .addComponent(btnRefreshRegistering))
                .addContainerGap(67, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("QUẢN LÝ ĐĂNG KÝ", jPanel3);

        tblClassification.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lớp học phần", "Mã sinh viên", "Tên sinh viên", "Lớp sinh viên", "Mã môn", "Tên môn", "Thời gian đăng ký"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblClassification);

        btnCreateCourseClass.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnCreateCourseClass.setText("Lập danh sách lớp");
        btnCreateCourseClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateCourseClassActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1030, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(417, 417, 417)
                .addComponent(btnCreateCourseClass, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCreateCourseClass)
                .addGap(21, 21, 21)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("LẬP DANH SÁCH LỚP", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSubjectActionPerformed
        // TODO add your handling code here:
        AddSubject as = null;
        try {
            as = new AddSubject(tblSubject);
        } catch (SQLException ex) {
            Logger.getLogger(AdminHome.class.getName()).log(Level.SEVERE, null, ex);
        }
        as.setVisible(true);
    }//GEN-LAST:event_btnAddSubjectActionPerformed

    private void btnRemoveSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveSubjectActionPerformed
        try {
            deleteSubjectFromTable(tblSubject);
        } catch (SQLException ex) {
            Logger.getLogger(AdminHome.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRemoveSubjectActionPerformed

    private void deleteSubjectFromTable(JTable table) throws SQLException {
        int[] selectedRows = table.getSelectedRows();
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        for (int i = selectedRows.length - 1; i >= 0; i--) {
            String subjectId = (String) model.getValueAt(selectedRows[i], 1);
            Subject sub = subjectCon.findSubjectById(subjectId);
            if (subjectCon.deleteSubject(sub)) {
                model.removeRow(selectedRows[i]);
            } else {
                JOptionPane.showMessageDialog(null, "Không thể xóa môn học này do đã có sinh viên đăng ký");
                return;
            }
        }
    }

    private void deleteRegistrationFromTable(JTable table) throws SQLException {
        int[] selectedRows = table.getSelectedRows();
        DefaultTableModel model = (DefaultTableModel) table.getModel();

        for (int i = selectedRows.length - 1; i >= 0; i--) {
            String studentId = (String) model.getValueAt(selectedRows[i], 1);
            String subjectId = (String) model.getValueAt(selectedRows[i], 4);
            Student stu = studentCon.findStudentById(studentId);
            Subject sub = subjectCon.findSubjectById(subjectId);
            regisCon.deleteRegis(new Registration(stu, sub));
            model.removeRow(selectedRows[i]);
        }
    }

    private void btnEditSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditSubjectActionPerformed
        // TODO add your handling code here:
        int[] selectedRows = tblSubject.getSelectedRows();
        DefaultTableModel model = (DefaultTableModel) tblSubject.getModel();

        if (selectedRows.length == 0) {
            JOptionPane.showMessageDialog(null, "Hãy chọn một môn học");
        } else {
            for (int i = 0; i < selectedRows.length; i++) {
                String subjectId = (String) model.getValueAt(selectedRows[i], 1);
                String subjectName = (String) model.getValueAt(selectedRows[i], 2);
                String subjectType = (String) model.getValueAt(selectedRows[i], 3);
                int credit = Integer.parseInt(model.getValueAt(selectedRows[i], 4).toString());
                try {
                    new EditSubject(new Subject(subjectId, subjectName, subjectType, credit)).setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(AdminHome.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnEditSubjectActionPerformed


    private void btnAddStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddStudentActionPerformed
        try {
            // TODO add your handling code here:
            new AddStudent().setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(AdminHome.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddStudentActionPerformed

    private void btnEditStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditStudentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditStudentActionPerformed

    private void btnCreateCourseClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateCourseClassActionPerformed
        try {
            courseCon.loadDataIntoTable(courseCon.getCourseList(), tblClassification);
        } catch (SQLException ex) {
            Logger.getLogger(AdminHome.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCreateCourseClassActionPerformed

    private void btnRemoveRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveRegisterActionPerformed
        try {
            // TODO add your handling code here:
            deleteRegistrationFromTable(tblRegister);
        } catch (SQLException ex) {
            Logger.getLogger(AdminHome.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnRemoveRegisterActionPerformed

    private void btnRemoveStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveStudentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRemoveStudentActionPerformed

    private void rbSortByCreditDESCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortByCreditDESCActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_rbSortByCreditDESCActionPerformed

    private void btnLoadDataFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadDataFromFileActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            int dialogResult = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn cập nhật từ file này ?", "Xác nhận", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.YES_OPTION) {
                convertData.readTextFile(selectedFile.getName());
                subjectCon.loadDataIntoTable(subjectCon.getSubjectList(), tblSubject);
            }
        }
    }//GEN-LAST:event_btnLoadDataFromFileActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        int confirmed = JOptionPane.showConfirmDialog(null,
            "Bạn có chắc chắn muốn thoát chương trình?", "Confirm",
            JOptionPane.YES_NO_OPTION);
        if (confirmed == JOptionPane.YES_OPTION) {
            dispose();
            try {
                new Login().setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(StudentHome.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnRefreshSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshSubjectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRefreshSubjectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminHome().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRegistration;
    private javax.swing.JButton btnAddStudent;
    private javax.swing.JButton btnAddSubject;
    private javax.swing.JButton btnCreateCourseClass;
    private javax.swing.JButton btnEditStudent;
    private javax.swing.JButton btnEditSubject;
    private javax.swing.ButtonGroup btnGroupSearchSubject;
    private javax.swing.ButtonGroup btnGroupSortSubject;
    private javax.swing.JButton btnLoadDataFromFile;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnRefreshRegistering;
    private javax.swing.JButton btnRefreshStudentList;
    private javax.swing.JButton btnRefreshSubject;
    private javax.swing.JButton btnRemoveRegister;
    private javax.swing.JButton btnRemoveStudent;
    private javax.swing.JButton btnRemoveSubject;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchR;
    private javax.swing.JButton btnSearchStudent;
    private javax.swing.JComboBox<String> cbTypeSubject;
    private javax.swing.JComboBox<String> comboSortRegistering;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JRadioButton rbSearchByCredit;
    private javax.swing.JRadioButton rbSearchByName;
    private javax.swing.JRadioButton rbSearchByTypeSubject;
    private javax.swing.JRadioButton rbSearchRBySName;
    private javax.swing.JRadioButton rbSearchRByTime;
    private javax.swing.JRadioButton rbSearchStudentById;
    private javax.swing.JRadioButton rbSearchStudentByMajor;
    private javax.swing.JRadioButton rbSearchStudentByName;
    private javax.swing.JRadioButton rbSortByCreditASC;
    private javax.swing.JRadioButton rbSortByCreditDESC;
    private javax.swing.JRadioButton rbSortByNameASC;
    private javax.swing.JRadioButton rbSortByNameDESC;
    private javax.swing.JRadioButton rbSortStudentByIdASC;
    private javax.swing.JRadioButton rbSortStudentByIdDESC;
    private javax.swing.JRadioButton rbSortStudentByNameASC;
    private javax.swing.JRadioButton rbSortStudentByNameDESC;
    private javax.swing.JTable tblClassification;
    private javax.swing.JTable tblRegister;
    private javax.swing.JTable tblStudent;
    private javax.swing.JTable tblSubject;
    private javax.swing.JTextField txtSearchByCredit;
    private javax.swing.JTextField txtSearchByName;
    private javax.swing.JTextField txtSearchRBySName;
    private javax.swing.JTextField txtSearchRFromDate;
    private javax.swing.JTextField txtSearchRToDate;
    private javax.swing.JTextField txtSearchStudentById;
    private javax.swing.JTextField txtSearchStudentByMajor;
    private javax.swing.JTextField txtSearchStudentByName;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        Object selected = e.getSource();
         if (selected.equals(rbSortByCreditDESC)) {
            rbSortByCreditASC.setSelected(false);
            rbSortByNameDESC.setSelected(false);
            rbSortByNameASC.setSelected(false);
            if (rbSortByCreditDESC.isSelected() == false) {
                subjectCommander.SortSubjectByCreditDESC_unClick();
                subjectCon.loadDataIntoTable(subjectCon.getSubjectList(), tblSubject);
            } else {
                subjectCommander.SortSubjectByCreditDESC_click();
                subjectCon.loadDataIntoTable(subjectCon.getSubjectList(), tblSubject);
            }
        } else if (selected.equals(rbSortByCreditASC)) {
            rbSortByCreditDESC.setSelected(false);
            rbSortByNameDESC.setSelected(false);
            rbSortByNameASC.setSelected(false);
            if (rbSortByCreditASC.isSelected() == false) {
                subjectCommander.SortSubjectByCreditASC_unClick();
                subjectCon.loadDataIntoTable(subjectCon.getSubjectList(), tblSubject);
            } else {
                subjectCommander.SortSubjectByCreditASC_click();
                subjectCon.loadDataIntoTable(subjectCon.getSubjectList(), tblSubject);
            }
        } else if (selected.equals(rbSortByNameASC)) {
            rbSortByCreditASC.setSelected(false);
            rbSortByNameDESC.setSelected(false);
            rbSortByCreditDESC.setSelected(false);
            if (rbSortByNameASC.isSelected() == false) {
                subjectCommander.SortSubjectByNameASC_unClick();
                subjectCon.loadDataIntoTable(subjectCon.getSubjectList(), tblSubject);
            } else {
                subjectCommander.SortSubjectByNameASC_click();
                subjectCon.loadDataIntoTable(subjectCon.getSubjectList(), tblSubject);
            }
        } else if (selected.equals(rbSortByNameDESC)) {
            rbSortByNameASC.setSelected(false);
            rbSortByCreditASC.setSelected(false);
            rbSortByCreditDESC.setSelected(false);
            if (rbSortByNameDESC.isSelected() == false) {
                subjectCommander.SortSubjectByNameDESC_unClick();
                subjectCon.loadDataIntoTable(subjectCon.getSubjectList(), tblSubject);
            } else {
                subjectCommander.SortSubjectByNameDESC_click();
                subjectCon.loadDataIntoTable(subjectCon.getSubjectList(), tblSubject);
            }
        } else if (selected.equals(rbSortStudentByNameASC)) {
            rbSortStudentByNameDESC.setSelected(false);
            rbSortStudentByIdASC.setSelected(false);
            rbSortStudentByIdDESC.setSelected(false);
            if (rbSortStudentByNameASC.isSelected() == false) {
                studentCommander.SortStudentByNameASC_unClick();
                studentCon.loadDataIntoTable(studentCon.getStudentList(), tblStudent);
            } else {
                studentCommander.SortStudentByNameASC_click();
                studentCon.loadDataIntoTable(studentCon.getStudentList(), tblStudent);
            }
        } else if (selected.equals(rbSortStudentByNameDESC)) {
            rbSortStudentByIdASC.setSelected(false);
            rbSortStudentByNameASC.setSelected(false);
            rbSortStudentByIdDESC.setSelected(false);
            if (rbSortStudentByNameDESC.isSelected() == false) {
                studentCommander.SortStudentByNameDESC_unClick();
                studentCon.loadDataIntoTable(studentCon.getStudentList(), tblStudent);
            } else {
                studentCommander.SortStudentByNameDESC_click();
                studentCon.loadDataIntoTable(studentCon.getStudentList(), tblStudent);
            }
        } else if (selected.equals(rbSortStudentByIdASC)) {
            rbSortStudentByNameDESC.setSelected(false);
            rbSortStudentByNameASC.setSelected(false);
            rbSortStudentByIdDESC.setSelected(false);
            if (rbSortStudentByIdASC.isSelected() == false) {
                studentCommander.SortStudentByIdASC_unClick();
                studentCon.loadDataIntoTable(studentCon.getStudentList(), tblStudent);
            } else {
                studentCommander.SortStudentByIdASC_click();
                studentCon.loadDataIntoTable(studentCon.getStudentList(), tblStudent);
            }
        } else if (selected.equals(rbSortStudentByIdDESC)) {
            rbSortStudentByNameDESC.setSelected(false);
            rbSortStudentByNameASC.setSelected(false);
            rbSortStudentByIdASC.setSelected(false);
            if (rbSortStudentByIdDESC.isSelected() == false) {
                studentCommander.SortStudentByIdDESC_unClick();
                studentCon.loadDataIntoTable(studentCon.getStudentList(), tblStudent);
            } else {
                studentCommander.SortStudentByIdDESC_click();
                studentCon.loadDataIntoTable(studentCon.getStudentList(), tblStudent);
            }
        } //end searching subject
        else if (selected.equals(btnSearchR)) {
            if (!rbSearchRBySName.isSelected() && !rbSearchRByTime.isSelected()) {
                JOptionPane.showMessageDialog(null, "Hãy chọn một tiêu chí để tìm kiếm");
                return;
            } else {
                searchRegis();
            }

        } else if (selected.equals(btnSearch)) {
            if (!rbSearchByName.isSelected() && !rbSearchByCredit.isSelected() && !rbSearchByTypeSubject.isSelected()) {
                JOptionPane.showMessageDialog(null, "Hãy chọn một tiêu chí để tìm kiếm");
                return;
            } else {
                searchSubject();
            }
        } else if (selected.equals(btnSearchStudent)) {
            if (!rbSearchStudentByName.isSelected() && !rbSearchStudentById.isSelected() && !rbSearchStudentByMajor.isSelected()) {
                JOptionPane.showMessageDialog(null, "Hãy chọn một tiêu chí để tìm kiếm");
                return;
            } else {
                searchStudent();
            }
        } else if (selected.equals(btnRefreshSubject)) {
            try {
                subjectCon.loadDataIntoTable(new SubjectController().getSubjectList(), tblSubject);
                
            } catch (SQLException ex) {
                Logger.getLogger(AdminHome.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (selected.equals(btnAddRegistration)) {
            new AddRegistration().setVisible(true);
        } else if (selected.equals(comboSortRegistering)) {
            sortRegister();
        } else if (selected.equals(rbSearchByName)) {
            rbSearchByCredit.setSelected(false);
            rbSearchByTypeSubject.setSelected(false);
        } else if (selected.equals(rbSearchByCredit)) {
            rbSearchByName.setSelected(false);
            rbSearchByTypeSubject.setSelected(false);
        } else if (selected.equals(rbSearchByTypeSubject)) {
            rbSearchByName.setSelected(false);
            rbSearchByCredit.setSelected(false);
        } else if (rbSearchStudentByName.equals(selected)) {
            rbSearchStudentById.setSelected(false);
            rbSearchStudentByMajor.setSelected(false);
        } else if (rbSearchStudentById.equals(selected)) {
            rbSearchStudentByName.setSelected(false);
            rbSearchStudentByMajor.setSelected(false);
        } else if (rbSearchStudentByMajor.equals(selected)) {
            rbSearchStudentByName.setSelected(false);
            rbSearchStudentById.setSelected(false);
        } else if (rbSearchRBySName.equals(selected)) {
            rbSearchRByTime.setSelected(false);
        } else if (rbSearchRByTime.equals(selected)) {
            rbSearchRBySName.setSelected(false);
        }

    }

    private void addActionListener() {
        rbSortByCreditDESC.addActionListener(this);
        rbSortByCreditASC.addActionListener(this);
        rbSortByNameDESC.addActionListener(this);
        rbSortByNameASC.addActionListener(this);
        rbSortStudentByNameASC.addActionListener(this);
        rbSortStudentByNameDESC.addActionListener(this);
        rbSortStudentByIdASC.addActionListener(this);
        rbSortStudentByIdDESC.addActionListener(this);
        rbSearchByName.addActionListener(this);
        rbSearchByCredit.addActionListener(this);
        rbSearchByTypeSubject.addActionListener(this);
        btnSearch.addActionListener(this);
        btnSearchR.addActionListener(this);
        rbSearchStudentByName.addActionListener(this);
        rbSearchStudentById.addActionListener(this);
        rbSearchStudentByMajor.addActionListener(this);
        btnSearchStudent.addActionListener(this);
        btnRefreshSubject.addActionListener(this);
        btnAddRegistration.addActionListener(this);
        comboSortRegistering.addActionListener(this);
        rbSearchRBySName.addActionListener(this);
        rbSearchRByTime.addActionListener(this);

    }

    private void sortRegister() {
        int option = comboSortRegistering.getSelectedIndex();
        if (option == 0) {
            regisCommander.sortByTimeASC_click();
            regisCon.loadDataIntoTable(regisCon.getRegisList(), tblRegister);
        } else if (option == 1) {
            regisCommander.sortByTimeDESC_click();
            regisCon.loadDataIntoTable(regisCon.getRegisList(), tblRegister);
        }
    }

    private void searchSubject() {
        SearchingSubject s = new SearchingSubject();
        SearchByName sbn = new SearchByName();
        SearchByCredit sbc = new SearchByCredit();
        SearchBySubjectType sbst = new SearchBySubjectType();
        String searchBy = "";
        if (rbSearchByName.isSelected()) {
            rbSearchByCredit.setSelected(false);
            rbSearchByTypeSubject.setSelected(false);
            if (valid.checkFill(txtSearchByName.getText())) {
                searchBy = txtSearchByName.getText();
                s.setiSearch(sbn);
            } else {
                JOptionPane.showMessageDialog(null, "Hãy điền đầy đủ các thông tin");
                return;
            }
        } else if (rbSearchByCredit.isSelected()) {
            rbSearchByName.setSelected(false);
            rbSearchByTypeSubject.setSelected(false);
            if (valid.checkFill(txtSearchByCredit.getText())) {
                searchBy = txtSearchByCredit.getText();
                s.setiSearch(sbc);
            } else {
                JOptionPane.showMessageDialog(null, "Hãy điền đầy đủ các thông tin");
                return;
            }
        } else if (rbSearchByTypeSubject.isSelected()) {
            rbSearchByName.setSelected(false);
            rbSearchByCredit.setSelected(false);
            if (valid.checkFill((String) cbTypeSubject.getSelectedItem())) {
                searchBy = (String) cbTypeSubject.getSelectedItem();
                s.setiSearch(sbst);
            } else {
                JOptionPane.showMessageDialog(null, "Hãy điền đầy đủ các thông tin");
                return;
            }

        }
        s.setSubjectList(subjectCon.getSubjectList());
        subjectCon.loadDataIntoTable(s.search(searchBy), tblSubject);
    }

    private void searchStudent() {
        SearchingStudent s = new SearchingStudent();
        SearchByStudentName sbsn = new SearchByStudentName();
        SearchByMajor sbsm = new SearchByMajor();
        SearchByStudentId sbsi = new SearchByStudentId();
        String searchBy = "";
        if (rbSearchStudentByName.isSelected()) {
            if (valid.checkFill(txtSearchStudentByName.getText())) {
                searchBy = txtSearchStudentByName.getText();
                s.setiSearch(sbsn);
            } else {
                JOptionPane.showMessageDialog(null, "Hãy điền đầy đủ các thông tin");
                return;
            }

        } else if (rbSearchStudentById.isSelected()) {
            if (valid.checkFill(txtSearchStudentById.getText())) {
                searchBy = txtSearchStudentById.getText();
                s.setiSearch(sbsi);
            } else {
                JOptionPane.showMessageDialog(null, "Hãy điền đầy đủ các thông tin");
                return;
            }
        } else if (rbSearchStudentByMajor.isSelected()) {
            if (valid.checkFill(txtSearchStudentByMajor.getText())) {
                searchBy = txtSearchStudentByMajor.getText();
                s.setiSearch(sbsm);
            } else {
                JOptionPane.showMessageDialog(null, "Hãy điền đầy đủ các thông tin");
                return;
            }

        }
        s.setStudentList(studentCon.getStudentList());
        studentCon.loadDataIntoTable(s.search(searchBy), tblStudent);
    }

    private void searchRegis() {
        SearchingRegistration s = new SearchingRegistration();
        SearchByReigsterTime sbrt = new SearchByReigsterTime();
        SearchByRegistrationName sbrn = new SearchByRegistrationName();
        String searchBy = "";
        String searchTo = "";
        if (rbSearchRBySName.isSelected()) {
            if (valid.checkFill(txtSearchRBySName.getText())) {
                searchBy = txtSearchRBySName.getText();
                s.setiSearch(sbrn);
            } else {
                JOptionPane.showMessageDialog(null, "Hãy điền đầy đủ các thông tin");
                return;
            }

        } else if (rbSearchRByTime.isSelected()) {
            if (valid.checkFill(txtSearchRFromDate.getText()) && valid.checkFill(txtSearchRToDate.getText())) {
                searchBy = txtSearchRFromDate.getText();
                searchTo = txtSearchRToDate.getText();
                s.setiSearch(sbrt);
            } else {
                JOptionPane.showMessageDialog(null, "Hãy điền đầy đủ các thông tin");
                return;
            }
        }
        s.setRegistrationList(regisCon.getRegisList());
        regisCon.loadDataIntoTable(s.search(searchBy, searchTo), tblRegister);
    }

}
